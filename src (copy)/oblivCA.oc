#include "oblivCA.oh"

void signCertificate(void* args){
  
  
  protocolIO *io = args;
  obig pk1, pk2, pk;
  obig p_o, g_x_o, n_o; 
  obliv char k1[MAXN], k2[MAXN];
  obliv unsigned long long p_c, g_x_c, n_c; 
  io->private_key = (char *) malloc(MAXN);
  /*
  io->p = (long *) malloc(MAXN);
  io->g_x = (long *) malloc(MAXN);
  io->n = (long *) malloc(MAXN);
  */
  io->output_r = (long long *) malloc(MAXN);

  obig_init(&pk1, MAXN);
  obig_init(&pk2, MAXN);
  obig_init(&pk, MAXN); 
  obig_init(&p_o, MAXN);
  obig_init(&g_x_o, MAXN);
  obig_init(&n_o, MAXN);

  obig result_q;
  obig result_r;

  obig_init(&result_q, MAXN);
  obig_init(&result_r, MAXN);
 
  feedOblivCharArray(k1, io->private_key_share1, MAXN, 1);
  feedOblivCharArray(k2, io->private_key_share2, MAXN, 2);
  p_c = feedOblivLLong(io->p, 1);
  g_x_c = feedOblivLLong(io->g_x, 2);
  n_c = feedOblivLLong(io->n, 3);
  
  obig_import_opointed(&pk1, k1, MAXN);
  obig_import_opointed(&pk2, k2, MAXN);
  obig_import_onative(&p_o, p_c); 
  obig_import_onative(&g_x_o, g_x_c); 
  obig_import_onative(&n_o, n_c); 

  obig_xor(&pk, pk1, pk2);
  obliv bool success = obig_div_mod(&result_q, &result_r, g_x_o, n_o);

  for (int ii = 0; ii < result_r.digits; ii++) // temporary code to check if private key is correctly evaluated
    revealOblivChar(&io->output_r[ii], result_r.data[ii], 0);
  
  
  
  obig_free(&pk1);
  obig_free(&pk2);
  obig_free(&pk);
  obig_free(&p_o);
  obig_free(&g_x_o);
  obig_free(&n_o);
  obig_free(&result_q);
  obig_free(&result_r);

  /*
  //signing operation follows: http://www.secg.org/sec1-v2.pdf page 44 4.1.3

  // obig_div_mod

  unsigned int x = 0x7E48A840;
  unsigned int y = 0x47E0DD18;

  obliv unsigned int xo;
  obliv unsigned int yo;
  xo = feedOblivInt(x, 1);
  yo = feedOblivInt(y, 2);

  obig x_test;
  obig y_test;
  obig result_q;
  obig result_r;

  obig_init(&x_test, sizeof(int));
  obig_init(&y_test, sizeof(int));
  obig_init(&result_q, sizeof(int));
  obig_init(&result_r, sizeof(int));

  
  obig_import_onative(&x_test, xo);
  obig_import_onative(&y_test, yo);
  unsigned char temp;
  //unsigned output_q;
  //unsigned output_r;
  io->output_q = (int *) malloc(MAXN);
  io->output_r = (int *) malloc(MAXN);

  obliv bool success = obig_div_mod(result_q, result_r, x_test, y_test);
  bool tempBool;
  revealOblivBool(&tempBool, success, 0);
  

  for (int ii = result_q.digits -1; ii >= 0; ii--) {
    revealOblivChar(&temp, result_q.data[ii], 0);
    &io->output_q <<= 8;
    io->output_q += temp;
  }

  for (int ii = result_r.digits -1; ii >= 0; ii--) {
    revealOblivChar(&temp, result_r.data[ii], 0);
    io->output_r <<= 8;
    io->output_r += temp;
  }

  obig_free(&x_test);
  obig_free(&y_test);
  obig_free(&result_q);
  obig_free(&result_r);
  */

  
  
}
