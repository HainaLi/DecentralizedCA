#include "oblivCA.oh"
#include "oblivECC.oh"

void combine_shares(obig *output, obig share_A, obig share_B, obig p) {
  obig interim, divisor;

  ~obliv(_en) {
    obig_init(&divisor, MAXN);
    obig_init(&interim, MAXN + 1);
  }

  obig *interimref = &interim;
  obig_dec(&divisor, p);
  obig_add(&interim, share_A, share_B);
  obliv if (obig_cmp(interim, divisor) >= 0) {
    obig_sub(interimref, interim, divisor);
  }
  obig_inc(output, interim);

  ~obliv(_en) {
    obig_free(&divisor);
    obig_free(&interim);
  }
}

void generatePublicKey(void* args) {
  protocolIO *io = args;
  obig pk_A, pk_B, pk, Q_x, Q_y;
  obig p, g_x, g_y, n, a;
  obliv uint8_t pk_A_array[MAXN], pk_B_array[MAXN];

  obig_init(&pk_A, MAXN);
  obig_init(&pk_B, MAXN);
  obig_init(&pk, MAXN);
  obig_init(&p, MAXN);
  obig_init(&g_x, MAXN);
  obig_init(&g_y, MAXN);
  obig_init(&Q_x, MAXN);
  obig_init(&Q_y, MAXN);
  obig_init(&n, MAXN);
  obig_init(&a, MAXN);
 
  assert(ocBroadcastInt(io->proto, 1) == ocBroadcastInt(io->proto, 2));
  assert(ocBroadcastInt(io->operation, 1) == ocBroadcastInt(io->operation, 2));
  assert(ocBroadcastInt(io->operation, 1) != 0 && ocBroadcastInt(io->operation, 2) != 0);
  assert(ocBroadcastInt(io->proto, 1) != 0 && ocBroadcastInt(io->proto, 2) != 0);

  feedOblivCharArray(pk_A_array, io->pk_A, MAXN, 1);
  feedOblivCharArray(pk_B_array, io->pk_B, MAXN, 2);

  obig_import_opointed_be(&pk_A, pk_A_array, MAXN);
  obig_import_opointed_be(&pk_B, pk_B_array, MAXN);
  obig_import_pointed_be(&p, io->p, MAXN);
  obig_import_pointed_be(&g_x, io->g_x, MAXN);
  obig_import_pointed_be(&g_y, io->g_y, MAXN);
  obig_import_pointed_be(&n, io->n, MAXN);
  obig_import_pointed_be(&a, io->a, MAXN);


  // Public Key Generation follows: http://www.secg.org/sec1-v2.pdf page 23 3.2.1

  // 1. Select an integer d <- [1, n-1], here private key 'pk' corresponds to 'd' and 'p' corresponds to 'n' 
  combine_shares(&pk, pk_A, pk_B, p);

  // 2. Compute Q = dG
  curveMult(&Q_x, &Q_y, g_x, g_y, pk, a, p);

  // 3. Output Q
  for (int ii = 0; ii < Q_x.digits; ii++) {
    revealOblivChar(&io->Q_x[ii], Q_x.data[ii], 0);
  }
  
  for(int ii = 0; ii < Q_y.digits; ii++) {
    revealOblivChar(&io->Q_y[ii], Q_y.data[ii], 0);
  }

  printGateCount();
  
  obig_free(&pk_A);
  obig_free(&pk_B);
  obig_free(&pk);
  obig_free(&p);
  obig_free(&g_x);
  obig_free(&g_y);
  obig_free(&Q_x);
  obig_free(&Q_y);
  obig_free(&n);
  obig_free(&a);
}

void signCertificate(void* args) {
  protocolIO *io = args;
  obig pk_A, pk_B, pk, k_A, k_B, k, R_x, R_y, zero;
  obig p, g_x, g_y, n, a, z;
  obig tmp, r, k_inverse, interim, interim_mod, s;
  obliv uint8_t k_A_array[MAXN], k_B_array[MAXN], pk_A_array[MAXN], pk_B_array[MAXN];
  obliv bool r_comp_result = false, s_comp_result = false;
  uint8_t z_A[Z_LENGTH], z_B[Z_LENGTH];

  obig_init(&pk_A, MAXN);
  obig_init(&pk_B, MAXN);
  obig_init(&pk, MAXN);
  obig_init(&k_A, MAXN);
  obig_init(&k_B, MAXN);
  obig_init(&k, MAXN);
  obig_init(&p, MAXN);
  obig_init(&g_x, MAXN);
  obig_init(&g_y, MAXN);
  obig_init(&R_x, MAXN);
  obig_init(&R_y, MAXN);
  obig_init(&n, MAXN);
  obig_init(&a, MAXN);
  obig_init(&z, Z_LENGTH);
  obig_init(&tmp, MAXN);
  obig_init(&r, MAXN);
  obig_init(&k_inverse, MAXN);
  obig_init(&interim, 2*MAXN + 1);
  obig_init(&interim_mod, MAXN + 1);
  obig_init(&s, MAXN);
  obig_init(&zero, MAXN);

  assert(ocBroadcastInt(io->proto, 1) == ocBroadcastInt(io->proto, 2));
  assert(ocBroadcastInt(io->operation, 1) == ocBroadcastInt(io->operation, 2));
  assert(ocBroadcastInt(io->operation, 1) != 0 && ocBroadcastInt(io->operation, 2) != 0);
  assert(ocBroadcastInt(io->proto, 1) != 0 && ocBroadcastInt(io->proto, 2) != 0);

  feedOblivCharArray(pk_A_array, io->pk_A, MAXN, 1);
  feedOblivCharArray(pk_B_array, io->pk_B, MAXN, 2);
  feedOblivCharArray(k_A_array, io->k_A, MAXN, 1);
  feedOblivCharArray(k_B_array, io->k_B, MAXN, 2);

  obig_import_opointed_be(&pk_A, pk_A_array, MAXN);
  obig_import_opointed_be(&pk_B, pk_B_array, MAXN);
  obig_import_opointed_be(&k_A, k_A_array, MAXN);
  obig_import_opointed_be(&k_B, k_B_array, MAXN);
  obig_import_pointed_be(&p, io->p, MAXN);
  obig_import_pointed_be(&g_x, io->g_x, MAXN);
  obig_import_pointed_be(&g_y, io->g_y, MAXN);
  obig_import_pointed_be(&n, io->n, MAXN);
  obig_import_pointed_be(&a, io->a, MAXN);

  // Hash of tbsCert message is being read in plain text from both the parties
  for (int i = 0; i < Z_LENGTH; i++) {
    z_A[i] = ocBroadcastChar(io->z_A[i], 1);
    z_B[i] = ocBroadcastChar(io->z_B[i], 2);
  }

  // Assertion is performed if the hash of tbsCert message of both the parties is same
  assert(compare(z_A, z_B, Z_LENGTH));
  obig_import_pointed_be(&z, z_A, Z_LENGTH);

  // Combine private key shares from both the parties
  combine_shares(&pk, pk_A, pk_B, p);

  // Signing operation follows: http://www.secg.org/sec1-v2.pdf page 44 4.1.3

  // 1. Select a curve pair (k, R). First we combine shares from both the parties to obtain 'k'
  combine_shares(&k, k_A, k_B, p);

  // Next we get the curve point 'R' corresponding to 'k'
  curveMult(&R_x, &R_y, g_x, g_y, k, a, p);
  
  // 2-3. r = R_x mod n
  obig_div_mod(&tmp, &r, R_x, n);
    
  // Check whether r is zero
  obliv if (obig_cmp(r, zero) == 0) {
    r_comp_result = true;
  }

  // 4-5. Steps 4-5 generate hash of tbsCert message 'z', which we already have, so we skip this

  // 6. s = k^-1 (z + rd) mod n
  mult_inverse(&k_inverse, k, n);
  obig_mul(&interim, r, pk);
  obig_add(&interim, z, interim);
  obig_div_mod(&tmp, &interim_mod, interim, n);
  obig_mul(&interim, k_inverse, interim_mod);
  obig_div_mod(&tmp, &s, interim, n);

  // Check whether s is zero
  obliv if (obig_cmp(s, zero) == 0) {
    s_comp_result = true;
  }

  // Reveal all outputs
  revealOblivBool(&io->RisZero, r_comp_result, 0);
  revealOblivBool(&io->SisZero, s_comp_result, 0);

  printGateCount();

  // 7. Output (r, s)
  for (int ii = 0; ii < r.digits; ii++) {
    revealOblivChar(&io->r[ii], r.data[ii], 0);
  }
  
  for(int ii = 0; ii < s.digits; ii++) {
    revealOblivChar(&io->s[ii], s.data[ii], 0);
  }

  obig_free(&pk_A);
  obig_free(&pk_B);
  obig_free(&pk);
  obig_free(&k_A);
  obig_free(&k_B);
  obig_free(&k);
  obig_free(&k_inverse);
  obig_free(&p);
  obig_free(&g_x);
  obig_free(&g_y);
  obig_free(&R_x);
  obig_free(&R_y);
  obig_free(&n);
  obig_free(&a);
  obig_free(&tmp);
  obig_free(&r);
  obig_free(&zero);
  obig_free(&s);
  obig_free(&z);
  obig_free(&interim);
  obig_free(&interim_mod); 
}
