#include "oblivCA.oh"

void pointDouble(obig* px, obig* py, obig a) obliv{

}

void pointAdd(obig* px, obig* py, obig* qx, obig* qy) obliv{

}

void curveMult(obig* gx, obig* gy, obig d, obig a) obliv{

}

void signCertificate(void* args){
  
  
  protocolIO *io = args;
  obig pk1, pk2, pk;
  obig p_o, g_x_o, n_o; 
  obliv char k1[MAXN], k2[MAXN];
  obliv char p_c[MAXN], g_x_c[MAXN], n_c[MAXN]; 
  io->private_key = (char *) malloc(MAXN);

  io->output = (int8_t *) malloc(MAXN);
  //io->output_r = (char *) malloc(MAXN);

  obig_init(&pk1, MAXN);
  obig_init(&pk2, MAXN);
  obig_init(&pk, MAXN); 
  obig_init(&p_o, MAXN);
  obig_init(&g_x_o, MAXN);
  obig_init(&n_o, MAXN);

  obig result_q;
  obig result_r;

  obig_init(&result_q, MAXN);
  obig_init(&result_r, MAXN);
 
  feedOblivCharArray(k1, io->private_key_share1, MAXN, 1);
  feedOblivCharArray(k2, io->private_key_share2, MAXN, 2);
  feedOblivCharArray(p_c, io->p, MAXN, 3);
  feedOblivCharArray(g_x_c, io->g_x, MAXN, 4);
  feedOblivCharArray(n_c, io->n, MAXN, 5);

  obig_import_opointed(&pk1, k1, MAXN);
  obig_import_opointed(&pk2, k2, MAXN);
  obig_import_opointed(&p_o, p_c, MAXN); 
  obig_import_opointed(&g_x_o, g_x_c, MAXN); 
  obig_import_opointed(&n_o, n_c, MAXN); 

  //xor private keys to obtain a master private key
  obig_xor(&pk, pk1, pk2);  

  //signing operation follows: http://www.secg.org/sec1-v2.pdf page 23 3.2.1, page 44 4.1.3

  //1. Select an integer d [1, n-1]
  //2. Compute Q=dG

  //3: r = Q_x mod n
  /*
  obliv bool success = obig_div_mod(&result_q, &result_r,[insert q_x], n_o);
  revealOblivBool(&io->tempBool, success, 0); 
  unsigned char temp; 


  for (int ii = result_q.digits -1; ii >= 0; ii--) {
    revealOblivChar(&temp, result_r.data[ii], 0);
    io->output_r <<= 8; 
    io->output_r += temp; 
  }
  */
  
  obig zero_o; 
  /*
  //Check whether result_r is zero
  char *zero_string = "0";
  obliv char zero[MAXN]; 
  feedOblivCharArray(zero, zero_string, MAXN, 1);
  
  obig_init(&zero_o, MAXN);
  obig_import_opointed(&zero_o, zero, MAXN); 
  obliv int8_t r_comp_result = obig_cmp(zero_o, result_r);
  */
  //revealOblivChar(&io->output, r_comp_result, 0); 

  obig_free(&pk1);
  obig_free(&pk2);
  obig_free(&pk);
  obig_free(&p_o);
  obig_free(&g_x_o);
  obig_free(&n_o);
  obig_free(&result_q);
  obig_free(&result_r);
  obig_free(&zero_o); 
  
  
}
